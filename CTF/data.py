#!/usr/bin/env python2
import binascii


# https://en.wikibooks.org/wiki/Algorithm_Implementation/Mathematics/Extended_Euclidean_algorithm
def xgcd(a, b):
    x0, x1, y0, y1 = 0, 1, 1, 0
    while a != 0:
        (q, a), b = divmod(b, a), a
        y0, y1 = y1, y0 - q * y1
        x0, x1 = x1, x0 - q * x1
    return b, x0, y0


# https://en.wikibooks.org/wiki/Algorithm_Implementation/Mathematics/Extended_Euclidean_algorithm
def modinv(a, m):
    g, x, y = xgcd(a, m)
    if g != 1:
        return None
    else:
        return x % m


n = 3283820208958447696987943374117448908009765357285654693385347327161990683145362435055078968569512096812028089118865534433123727617331619214412173257331161
p = 25345890944023959688633722779394267631420606952096686601662427533878110562209005849000138864433933334845837386130745824294020633421947769414082226192601463433288678968801841912122578235834721764183971950414577914028372864525681430392548930553170667474172823087260852996203008963781364833765576619403835070984394464546463888024151796379662364894924366775031415663957508758242666006943833343970487347748576023540616279082993631854188425113219096355754064778534389372825526841552949079077337335151428303249364419880024941437635607546733423024740461626680605664537119331029193490342253283518373792944100124413781252564559
q = 25732835364763912875851370204655878907210917971199680508773064611828211098503602125416936176283051791218311721842991721204709261391771459152313922621452771219459297707589905726203750917417922653286069666898297307161775630070043241719757306606357218148575766205412157640533667658609964520517439927200970626447218443117783442205422472581468253824017953765566860161201330462439199734770389175662982735299878614302244093264921517551577847056793785355771645546297712185303125911619359215224003542216186864036031152773750995054576170769883418643143770073143313469267992761625118914889074025888479394302694145483840838179361
e = 65537

# flag = "flag{...}"
# flag = int(binascii.hexlify(flag), 16)
# flag = pow(flag, e, n)
flag = 290472879963241135013217985548582753458458112373763299971885706234008271071664794907808594002580758348238469442729636418674554569361218726417887638234532816279905208257295956344994229437421603718881787056937517799140631697628378656207343907505551431789997165342364300565182632530619454364921540167634679782063422065734575677620381826806551780905218773797172136810873306173524642501273358068872252475477728584549914134327866772279275524664756785820211628978448958742871786951788895304672642503133900396922571407402736802302284319176468473406306147297676210323263653086364458118648977647555738098794879194839050897928556715366041452031842927133450156035523397043341930406137586076121229186718403703228217799986517553878074028371955140741388936784134835446490766810278783750347279500082757322120359912086900124596786883736341683492157003840199448870164830971375798595845736926008680396738150655718087077819094298070206260597275771218852184091461616278770059729120647768929532466854173789732475572160270987769489912945030440595984322457883081864278071948604528198090713904416329387744210491496747681325117257242392658855593217276490655041788523298244205053401953844889613050828461196182333371178259710728193482461060282925355745273782001
d = modinv(e, (p - 1) * (q - 1))
if d == None:
    print "definitely too primitive..."
else:
    print pow(flag, d, n)


# xgcd returns a triplet. The GCD is g, the first element of the triplet
g, x0, y0 = xgcd(p-1, q-1)

# computing lambda
l_lambda=(p-1)*(q-1) / g

# we arbitraly select k = 2, could work with another value
k = 2

# don't forget to use pow() and not **
L = pow(k, l_lambda/e, n)

# we check L is not 1, if that was the case, we'd need to use another k - see algo
assert L != 1

# Now we are able to compute d
d = modinv(e, l_lambda/e)
print "d=",d

# Compute the various solutions and stop when it's the flag
for i in range(0,e):
    ret = pow(pow(flag, d, n) * pow(L, i,n), 1, n)
    print "Result: ", ret

    # Transform the integer to a string
    v = hex(ret).replace('0x','').replace('L','')
    if len(v) %2 != 0:
        # Odd string length: that's because we have something like 0xa at the beginning
	# instead of 0x0a. We need to add the 0.
        v = '0'+v
    s = binascii.unhexlify(v)
    print "ASCII: ", s[0:20]
    
    if s[0:4] == 'flag':
        print "FOUND"
        print s
        quit()
